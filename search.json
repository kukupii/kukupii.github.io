[{"title":"响应式布局","date":"2023-03-03T06:10:33.000Z","url":"/2023/03/03/%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80-1/","tags":[["css","/tags/css/"]],"categories":[[" ",""]],"content":"响应式布局 媒体查询 mediaQuery什么是媒体查询概念：为不同尺寸的屏幕设定不同的CSS样式 简单案例： @media常用参数width, height &#x3D;&gt; 浏览器可视宽度，高度 device-width, device-height &#x3D;&gt; 设备屏幕的宽度，高度 媒体查询引入方式 写在style标签中，有条件的执行某个内部样式表。 link引入，写在link标签中，有条件的引入外部样式表。 flex弹性布局for parent element主轴方向与换行flex-direction：子元素在父元素盒子中的排列方式 值 描述 row 默认值。灵活的项目将水平显示，正如一个行一样。 row-reverse 与 row 相同，但是以相反的顺序。 column 灵活的项目将垂直显示，正如一个列一样。 column-reverse 与 column 相同，但是以相反的顺序。 initial 设置该属性为它的默认值。请参阅 initial。 inherit 从父元素继承该属性。请参阅 inherit。 flex-wrap：子元素在父元素盒子里是否换行（列） 值 描述 nowrap 默认值。不换行或不换列。 wrap 换行或换列。 wrap-reverse 换行或换列，但以相反的顺序。 flex-flow：flex-direction和flex-wrap属性的简写形式。eg: flex-flow: row wrap; 剩余空间调整为间距justify-content：用来在存在剩余空间时，设置为间距的方式。 值 描述 flex-start 默认值。从左到右，挨着行的开头。 flex-end 从右到左，挨着行的结尾。 center 居中显示。 space-between 平均分布在该行上，两边不留间隔空间。 space-around 平均分布在该行上，两边留一半的间隔空间。 align-items：设置每个flex元素在交叉轴上的默认对齐方式（单行，多行中单独处理每一行） 值 描述 flex-start 位于容器的开头。 flex-end 位于容器的结尾。 center 居中显示。 align-content：设置每个flex元素在交叉轴上的默认对齐方式（把多行当作一个整体处理） 值 描述 flex-start 位于容器的开头。 flex-end 位于容器的结尾。 center 居中显示。 space-between 之间留有空白。 space-around 两端留有空白。 for children elements 属性值 描述 flex-basis 设置弹性盒伸缩基准值。（相当于宽度，设置基准值后，宽度不再生效） flex-grow 设置弹性盒子的扩展比率。 flex-shrink 设置弹性盒子的缩小比率。 flex 上面三者的缩写。 值 描述 flex:auto; flex:1 1 auto; flex:none; flex:0 0 auto; flex:0%; flex:1 1 0%; flex:100px; flex:1 1 100px; flex:1; flex:1 1 0%; rem概念：指相对于根元素的字体大小的单位 使用媒体查询+rem或js，在不同宽度的视口下自动调整字体大小。 自适应布局布局特点： 不同设备对应不同的htm 局部自适应：例如三栏布局，中间一栏随尺寸大小伸缩。 主要通过js判断设备的类型或控制局部的变化 三栏布局类型： 响应式布局确保一个页面在所有终端上，都能显示出令人满意的效果。 以%或rem为单位；"},{"title":"Vue源码阅读笔记","date":"2022-12-20T08:12:23.000Z","url":"/2022/12/20/Vue%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/","tags":[["vue3","/tags/vue3/"],["notes","/tags/notes/"]],"categories":[[" ",""]],"content":"跟尤雨溪一起解读Vue3源码【中英字幕】- Vue Mastery观看笔记记录。 Introwhat is the DOM?Document Object Model. This is our browser’s interface(API) to change what is displayed on the screen. HTML maps to a series of DOM nodes that we can manipulate by JavaScript. 文件对象模型，浏览器页面所呈现的内容。把HTML加载到浏览器，浏览器创建一系列的DOM节点，并渲染在页面上，这些DOM节点可以使用JS进行操作。 Virtual DOMDOM tree上可以有成千上万的DOM节点，搜索和更新起来非常困难，因此诞生了Virtual DOM. Virtual DOM is a way of representing the actual DOM with JavaScript Objects. 一个简单的HTML，比如&lt;div&gt;hello&lt;/div&gt;,可以通过Vnode表现为 Vue基于模板创建一个渲染函数，并返回一个Vnode对象,例如 当Vnode有变化时，渲染函数再次运行，创建一个新的vnode节点，并与旧vnode节点对比（diff）。 Vue core module:Reactivity module, Compiler Module, Renderer Module. Reactivity module:allow us to create JavaScript reactive objects that can be watched for changes. when code which uses these objects are run, they’re tracked, so they can be run later if the reactivity object changes. Compiler Module:takes HTML templates and compiles them into render functions, more often happens when a Vue project is built, so that a browser only ever receives render functions. Renderer Module:Three phases: Render, mount and patch. render phase: call render function and return virtual DOM node. mount phase: use vnode creates webpage patch phase: compare old vnode with new vnode, and only updates the changed part. Walking through a simple Vue app: a template which reference to a reactive object the template compiler changes HTML into a render function the reactive objects are initialized using the reactivity module the render function returns a DOM node. it’s referred reactive object, now be watched. the mount phase uses the VNode to create the DOM to webpage if any changes happen to our reactive object, it will cause a re-render Rendering MechanismBenefits of Virtual DOM: Decouples rendering logical from the actual DOM - makes it straighforward to reuse it in non-browser envirnoment, e.g. rendering to a string(SSR), rendering to a canvas&#x2F;WebGL, or native mobile rendering. Provides the ability to programmatically construct, inspect, clone and create derivative structures before actually returning it to the rendering engine, and it using the full power of JavaScript. Conclusion: templates will get where you want to go, in 99% situation, you only need to write down the HTML, but if you want to do something programmatically, in that case, you need to code up a render funtion. What is render function?In Vue2 API (more nestle) In Vue3 API Flat props structure Globally imported h helper "},{"title":"js30学习笔记（01~05）","date":"2022-11-17T08:12:23.000Z","url":"/2022/11/17/js30%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8801~05%EF%BC%89/","tags":[["js30","/tags/js30/"],["javascript","/tags/javascript/"]],"categories":[[" ",""]],"content":"JavaScirpt30 是 Wes Bos 推出的一个 30 天挑战。项目免费提供了 30 个视频教程、30 个挑战的起始文档和 30 个挑战解决方案源代码。目的是帮助人们用纯 JavaScript 来写东西，不借助框架和库，也不使用编译器和引用。 Github库：(GitHub - soyaine&#x2F;JavaScript30: 有关 @wesbos 的课程 JavaScript-30 的中文练习指南) JavaScript Drum KitArray.from()Document.querySelector()选定的是NodeList，如果要用forEach循环，首先要用Array.from()转换。 currentTimecurrentTime 属性设置或返回视频播放的当前位置（以秒计）。 当设置该属性时，播放会跳跃到指定的位置。 document.getElementById(&quot;myVideo&quot;).currentTime = 5; Tansitionend (addEventHandler的事件)transitionend事件会在CSS transition结束后触发。当transition完成前移除transition 时，比如移除css的transition-property属性，事件将不会被触发。如在transition完成前设置display为”none”，事件同样不会被触发。 纯 JS、CSS 时钟transition-timing-function: cubic-bezier(x, x, x, x)transition-timing-function属性指定切换效果的速度。 此属性允许一个过渡效果，以改变其持续时间的速度。 值 描述 linear 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。 ease 规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。 ease-in 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。 ease-out 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。 ease-in-out 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。 cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。 transform-origintransform-Origin属性是用来更改转换元素的位置。 2D转换元素可以改变元素的X和Y轴。 3D转换元素，还可以更改元素的Z轴。 默认值为50% 50% 0，分别对应x轴、y轴和z轴。 CSS Variable:root 伪类这个伪元素匹配的是文档根元素，即。常用于声明全局的css变量； 在使用时： filter:blur(); filter:blur(20px)实现背景图片模糊效果。 trick: 使用dataset来储存单位后缀，如px；用JavaScript改变CSS属性值：如： 善用this keyword使用addEventListener时，善用this。 Array Cardio 💪Array.prototype.sort(); 语法：arr.sort([compareFunction])； Array.prototype.reduce 语法 : reduce((previousValue, currentValue, currentIndex) &#x3D;&gt; { &#x2F;* … *&#x2F; } , initialValue); 在网站中筛选 Day5 Flex Panel Gallerytransition属性 transition: property duration timing-function delay ; transition-property 表示哪个属性开始变化，比如background, width transition-duration 表示该变化持续多久时间 timing-function 表示该变化时间的速度曲线 delay 表示该变化何时开始 默认值：all 0 ease 0 flex布局MDN: flex 布局的基本概念 - CSS（层叠样式表） | MDN transform属性 transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。 transform: translateY(-100%);"},{"title":"抽离组件——Uploader组件","date":"2022-11-03T13:04:17.000Z","url":"/2022/11/03/%E6%8A%BD%E7%A6%BB%E7%BB%84%E4%BB%B6%E2%80%94%E2%80%94Uploader%E7%BB%84%E4%BB%B6/","tags":[["typescript","/tags/typescript/"],["vue","/tags/vue/"],["zheye","/tags/zheye/"],["component","/tags/component/"],["conclusion","/tags/conclusion/"]],"categories":[[" ",""]],"content":"上传文件的两种实现方式 form-submission JavaScript发送异步请求 Form-submission使用&lt;form&gt;标签。 跟普通的字符串不同，文件是二进制格式，所以要额外设置enctype=&#39;multipart/form-data&#39;。 关于 POST encType 的描述:POST - HTTP | MDN application&#x2F;x-www-form-urlencoded: 数据被编码成以 ‘&amp;’ 分隔的键-值对, 同时以 ‘&#x3D;’ 分隔键和值. 非字母或数字的字符会被 percent-encoding: 这也就是为什么这种类型不支持二进制数据(应使用 multipart&#x2F;form-data 代替). multipart&#x2F;form-data text&#x2F;plain 具体例子： JavaScript发送异步请求监听input的change事件 Uploader组件需求设计 接受验证功能 &#x3D;&gt; 验证文件的格式&#x2F;大小 接受action &#x3D;&gt; 自定义后端url 发送事件 &#x3D;&gt; 上传成功事件和上传失败事件 有状态 &#x3D;&gt; 上传前、中、后 上传成功后，显示上传图片 接受验证功能CheckFuntion应该在上传文件前进行调用，因此设置一个props为beforeUploaded接受一个验证函数，参数为文件，结果为布尔值，验证通过提交文件，否则return。 自定义后端urlprops接受action，类型为String，在axios.post时调用。 发送成功和失败事件和改变状态在Promise的then和catch中分别emit相关事件，传入成功值和错误，并改变状态值。 上传成功后显示上传图片具体文档：插槽 Slots | Vue.js 插槽的内容同时使用父组件域内和子组件域内的数据，要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。 因此，要向上传成功插槽的出口上传递 attributes： 在使用此插槽的组件，即CreatePost中通过子组件标签上的 v-slot 指令，直接接收到了一个插槽 props 对象： 子组件传入插槽的 props 作为了 v-slot 指令的值，可以在插槽内的表达式中访问。"},{"title":"通用错误处理——axios拦截","date":"2022-10-30T03:44:23.000Z","url":"/2022/10/30/%E9%80%9A%E7%94%A8%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E2%80%94%E2%80%94axios%E6%8B%A6%E6%88%AA/","tags":[["typescript","/tags/typescript/"],["vue","/tags/vue/"],["zheye","/tags/zheye/"],["error","/tags/error/"]],"categories":[[" ",""]],"content":"重点： 组件改用函数调用形式。 使用Vnode组成VitrualDom，并使用render function渲染。 通用错误处理Axios 拦截器的文档地址:Interceptors | Axios Docs 示例代码: 实际代码： 创建多种情况适用的Message组件 了解Vnode文档地址：virtual-dom Virtual DOM：一种虚拟的，保存在内存中的数据结构，用来代表 UI 的表现，和真实 DOM 节点保持同步。Virtual DOM是由一系列的 Vnode 组成的。 Here, vnode is a plain JavaScript object (a “virtual node”) representing a &lt;div&gt; element. It contains all the information that we need to create the actual element. It also contains more children vnodes, which makes it the root of a virtual DOM tree. A runtime renderer can walk a virtual DOM tree and construct a real DOM tree from it. This process is called mount. If we have two copies of virtual DOM trees, the renderer can also walk and compare the two trees, figuring out the differences, and apply those changes to the actual DOM. This process is called patch, also known as “diffing” or “reconciliation”. patch 的过程主要就是使用 diff 算法计算差别，然后更新的过程。 Render Pipeline Compile， Vue 组件的 Template 会被编译成 render function，一个可以返回 Virtual DOM 树的函数。 Mount，执行 render function，遍历虚拟DOM 树，生成真正的 DOM 节点。 Patch，当组件中任何响应式对象（依赖）发生变化的时候，执行更新操作 。生成新的虚拟节点树，Vue 内部会遍历新的虚拟节点树，和旧的树做对比，然后执行必要的更新。 Render function 创建Vnode以及使用Render function创建Vnodeh和createVnode都可以创建Vnode。两个用法差不多，后者名称更形象。 h 是 hyperscript 的缩写，意思就是 “JavaScript that produces HTML (hypertext markup language)”，很多 virtualDOM 的实现都使用这个函数名称。 声明 Render Function当使用 composition API 的时候，在 setup 当中直接返回一个对象，代表着给模版使用的数据，当要使用 render function 的时候，可以直接返回一个函数。 使用 JSX是 h 函数的一种语法糖。可以将这种类似 HTML 的语法转换成 h 函数的写法。 添加JSX支持： ts文件要将后缀名改为tsx才能使用这种语法。 js&#x3D;&gt;jsx 将组件改为函数调用形式并使用h函数创建useCreateMessage.tsx文件 "},{"title":"如何解决用户登陆和权限认证相关问题","date":"2022-10-27T12:23:21.000Z","url":"/2022/10/27/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86%E5%92%8C%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","tags":[["Auth","/tags/Auth/"]],"categories":[[" ",""]],"content":"总问题： pinia 怎样发送post请求 token是什么 jwt的工作原理 jwt和session的区别 SPA应用中怎样持久化获取用户的状态 针对不同的请求的权限管理 怎样显示全局数据显示 Pinia怎样发送POST请求建立一个单独的useAuthStore，在action中进行POST请求，使用async和await。 Unlike getters, actions can be asynchronous, you can await inside of actions any API call or even other actions! Token是什么Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。token其实说的更通俗点可以叫暗号，在一些数据传输之前，要先进行暗号的核对，不同的暗号被授权不同的数据操作。 Token在计算机身份认证中是令牌（临时）的意思，在词法分析中是标记的意思。一般作为邀请、登录系统使用。 jwt的工作原理在jwt工作原理之前，先了解一下两个权限认证的途径。第一个是基于cookie和session的登录验证，另一个是基于token和jwt的。 web应用中两个权限认证的途径：一、基于cookie和session的登陆验证（classic）（有状态） cookie：存储在客户端、不可跨域。 session： session 是另一种记录服务器和客户端会话状态的机制 session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的cookie 中 具体流程： 客户端发送登陆请求 服务器创建session，并存储在数据库中 服务器为用户生成一个sessionId，将具有sesssionId的Cookie将放置在用户浏览器中 在后续请求中，会根据数据库验证sessionID，如果有效，则接受请求 一旦用户注销应用程序，会话将在客户端和服务器端都被销毁 **二、 基于token和jwt的权限认证（popular)（无状态） 具体流程： 1.客户端发送登陆请求 2.服务器接收后使用jwt算法生成对应的token，并返回客户端。 3.客户端存储token，并在之后的每次权限请求把token放在header中。 4.服务器反向验证返回的token，验证成功则返回请求的数据。 jwt详解 1.概念： JWT （JSON Web Token） 是目前最流行的跨域认证解决方案，是一种基于 Token 的认证授权机制。 从 JWT 的全称可以看出，JWT 本身也是 Token，一种规范化之后的 JSON 结构的 Token。 2.组成部分 JWT 本质上就是一组字串，通过（.）切分成三个为 Base64 编码的部分： Header : 描述 JWT 的元数据，定义了生成签名的算法以及 Token 的类型。 Payload : 用来存放实际需要传递的数据 Signature（签名） ：服务器通过 Payload、Header 和一个密钥(Secret)使用 Header 里面指定的签名算法（默认是 HMAC SHA256）生成。 JWT 通常是这样的：xxxxx.yyyyy.zzzzz。 3.解码网站： jwt和session的区别 1.本身含义： jwt本身包含用户信息；Session传递的sessionId虽然是一个更简单的字符串，但它本身并没有任何含义。 2.用户的状态保存的位置： session是保存在服务端的，而jwt是保存在客户端的。 SPA应用中如何持久化获取用户的状态客户端存储的三种方案 cookie：不支持跨域 sessionStorage：页面关闭会被清除 localStorage：可以长期保存 localStorage实现持久化的流程 因此实现登陆+持久化的整个流程如下 "},{"title":"hexo使用方法备忘录","date":"2022-10-26T11:49:09.000Z","url":"/2022/10/26/hexo%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/","tags":[["hexo","/tags/hexo/"]],"categories":[[" ",""]],"content":"为了防止重演悲剧（指因为忘记操作而痛失的上一个博客），还是写一篇小 tips 好噜。 hexo 常用指令 新建文章 &#x3D;&gt; hexo new 布局 &quot;文章名&quot;布局可以是 post\\draft\\page;如果是 post 可以省略，直接 hexo new “文章名” 部署与调试 MarkDown 文章相关 文章配置tags:[tag1, tag2] 文章折叠在文章中使用本插件： 如果你希望某一折叠框默认展开： 文章标签插件 在文章中使用此插件： 其中 [ type ] 可选填：info、important、tip、caution、warning，分别对应 5 种样式。 Markdown语法 标题用#，几个#表示几级标题。 分割线（早期贴吧玩家狂喜） 三个__: 加粗（**），_斜体_（__）,删除线（~~) 链接 Autolinks: inside &lt; and &gt;  Inline links:[Assemble]() LoploopBlog 图片 （可以显示吗 我莉米米的 看不到的亏大了！ （方法：使用的github+PicGo+jsDelivr，方便的一匹！ 引用： use &gt; before any text you want to quote, can also be nested, means use multiple &gt;. Dancing like nobody is watching you. Todo List Hello. I think this point is toooo bigggg! and in a wrong position. special upper one is special cuz it has a link. normal: Links in todo lists: Table I’m tired now… when I need use it I will know its usage. So… bye~ "},{"title":"TypeScript 知识点总结Part.1","date":"2022-10-25T11:49:11.000Z","url":"/2022/10/25/TypeScript%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93Part.1/","tags":[["typescript","/tags/typescript/"]],"categories":[[" ",""]],"content":"原始数据类型和 Any 类型在新版的 ts 中，有一个特殊的配置是 strictNullChecks，在有些编辑器中默认为 true。它会严格检查 null 以及 undefined 类型，它只能赋值给本身的类型或者 any。文档在此： 可以在 tsconfig.json 将它设置为 false，就没有严格检查了。这个可以按照自己的喜好，开启或者关闭。 数据类型 : 原始数据类型 boolean、number、string、null、undefined、 Symbol、BigInt。 Object. Any 类型：可以赋任何类型的值，任意属性任意方法。 有明确类型时应避免使用 any。 数组和元组 数字数组：let arrOfNum: number[] = [1,2,3]; array like object，比如 arguments; 任何数组：any[]; 元组 tuple：在数组中加入不同类型的数据 起源于函数式编程 表述和数组非常类似； let user:[string, number] = [&#39;kukupi&#39;,21]; 多加一项或写错类型都会报错； 元组一定程度上限定了数据类型，本身是一个数组，所以可以使用数组方法。 可以使用 push 增加数据，但只能增加限定的数据类型中的。 eg: _限定了 string 和 number，就不能 push boolean 值_。 两种类型的或者关系称之为联合类型。 interface 接口 describes the shape of object Duck Typing: 动态编程语言对象推断策略，关注对象如何被使用，而不是对象类型本身。 const 和 readonly 区别：const 用于 variable, readonly 用于 attribute； 必须一一对应，不能多不能少，除了可选属性。 Function 函数1. 约定函数的输入和输出。 2. 可选参数（以?为标识）后不能有确定参数。 函数表达式： const add = (x:number, y:number, z?:number):number =&gt; &#123;***&#125; 如果直接将其他函数定义为此函数类型，输出类型的符号要变成“&#x3D;&gt;”，即 const add2:(x:number,y:number,z?:number)=&gt;number = add 更为简洁的方法是将此函数类型放在接口里，多个其他函数使用此类型就方便很多，例 使用时： const add2:IAdd = add 类型推论、联合类型和类型断言typescript 会在没指定类型时自动推断指定一个类型。 union types let numberOrString: number | string; 只能访问此联合类型的共有属性和方法。 2. 类型断言 用as关键词； 3. type guard 类型守卫 typeof Enum 枚举有点类似与一组常量数组 数字枚举： 成员会被赋值，默认从 0 开始依次递增的数字。可以改变默认起始值。 可以使用类似数组访问成员的方式反向访问枚举成员的属性 双向映射 字符串枚举： 每一项成员手动赋值 常量枚举声明：const enum Direction&#123;&#125;"},{"title":"search","date":"2022-10-25T07:44:22.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"tags","date":"2022-10-25T09:22:53.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"categories","date":"2022-10-25T09:24:29.000Z","url":"/categories/index.html","categories":[[" ",""]]}]